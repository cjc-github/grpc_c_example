// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: helloworld.proto
// Original file comments:
// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_helloworld_2eproto__INCLUDED
#define GRPC_helloworld_2eproto__INCLUDED

#include "helloworld.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace helloworld {

// The greeting service definition.
class Greeter final {
 public:
  static constexpr char const* service_full_name() {
    return "helloworld.Greeter";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Sends a greeting
    virtual ::grpc::Status SayHello(::grpc::ClientContext* context, const ::helloworld::HelloRequest& request, ::helloworld::HelloReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::HelloReply>> AsyncSayHello(::grpc::ClientContext* context, const ::helloworld::HelloRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::HelloReply>>(AsyncSayHelloRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::HelloReply>> PrepareAsyncSayHello(::grpc::ClientContext* context, const ::helloworld::HelloRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::HelloReply>>(PrepareAsyncSayHelloRaw(context, request, cq));
    }
    virtual ::grpc::Status SayHelloAgain(::grpc::ClientContext* context, const ::helloworld::HelloRequest& request, ::helloworld::HelloReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::HelloReply>> AsyncSayHelloAgain(::grpc::ClientContext* context, const ::helloworld::HelloRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::HelloReply>>(AsyncSayHelloAgainRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::HelloReply>> PrepareAsyncSayHelloAgain(::grpc::ClientContext* context, const ::helloworld::HelloRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::HelloReply>>(PrepareAsyncSayHelloAgainRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::helloworld::HelloReply>> SayHelloStreamReply(::grpc::ClientContext* context, const ::helloworld::HelloRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::helloworld::HelloReply>>(SayHelloStreamReplyRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::helloworld::HelloReply>> AsyncSayHelloStreamReply(::grpc::ClientContext* context, const ::helloworld::HelloRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::helloworld::HelloReply>>(AsyncSayHelloStreamReplyRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::helloworld::HelloReply>> PrepareAsyncSayHelloStreamReply(::grpc::ClientContext* context, const ::helloworld::HelloRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::helloworld::HelloReply>>(PrepareAsyncSayHelloStreamReplyRaw(context, request, cq));
    }
    // 注册请求
    virtual ::grpc::Status Register(::grpc::ClientContext* context, const ::helloworld::RegisterRequest& request, ::helloworld::RegisterResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::RegisterResponse>> AsyncRegister(::grpc::ClientContext* context, const ::helloworld::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::RegisterResponse>>(AsyncRegisterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::RegisterResponse>> PrepareAsyncRegister(::grpc::ClientContext* context, const ::helloworld::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::RegisterResponse>>(PrepareAsyncRegisterRaw(context, request, cq));
    }
    // 注销请求
    virtual ::grpc::Status Unregister(::grpc::ClientContext* context, const ::helloworld::UnregisterRequest& request, ::helloworld::UnregisterResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::UnregisterResponse>> AsyncUnregister(::grpc::ClientContext* context, const ::helloworld::UnregisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::UnregisterResponse>>(AsyncUnregisterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::UnregisterResponse>> PrepareAsyncUnregister(::grpc::ClientContext* context, const ::helloworld::UnregisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::UnregisterResponse>>(PrepareAsyncUnregisterRaw(context, request, cq));
    }
    // 状态报告请求
    virtual ::grpc::Status Heartbeat(::grpc::ClientContext* context, const ::helloworld::HeartbeatRequest& request, ::helloworld::HeartbeatResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::HeartbeatResponse>> AsyncHeartbeat(::grpc::ClientContext* context, const ::helloworld::HeartbeatRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::HeartbeatResponse>>(AsyncHeartbeatRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::HeartbeatResponse>> PrepareAsyncHeartbeat(::grpc::ClientContext* context, const ::helloworld::HeartbeatRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::HeartbeatResponse>>(PrepareAsyncHeartbeatRaw(context, request, cq));
    }
    // 向服务端发出拉取种子请求，服务端根据调度算法返回一个或多个种子数据
    virtual ::grpc::Status GetSeeds(::grpc::ClientContext* context, const ::helloworld::GetSeedsRequest& request, ::helloworld::GetSeedsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::GetSeedsResponse>> AsyncGetSeeds(::grpc::ClientContext* context, const ::helloworld::GetSeedsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::GetSeedsResponse>>(AsyncGetSeedsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::GetSeedsResponse>> PrepareAsyncGetSeeds(::grpc::ClientContext* context, const ::helloworld::GetSeedsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::GetSeedsResponse>>(PrepareAsyncGetSeedsRaw(context, request, cq));
    }
    // 向服务端提交一个种子数据
    virtual ::grpc::Status PutSeed(::grpc::ClientContext* context, const ::helloworld::PutSeedRequest& request, ::helloworld::PutSeedResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::PutSeedResponse>> AsyncPutSeed(::grpc::ClientContext* context, const ::helloworld::PutSeedRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::PutSeedResponse>>(AsyncPutSeedRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::PutSeedResponse>> PrepareAsyncPutSeed(::grpc::ClientContext* context, const ::helloworld::PutSeedRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::PutSeedResponse>>(PrepareAsyncPutSeedRaw(context, request, cq));
    }
    // 推送局部覆盖率
    virtual ::grpc::Status PutCoverage(::grpc::ClientContext* context, const ::helloworld::PutCoverageRequest& request, ::helloworld::PutCoverageResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::PutCoverageResponse>> AsyncPutCoverage(::grpc::ClientContext* context, const ::helloworld::PutCoverageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::PutCoverageResponse>>(AsyncPutCoverageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::PutCoverageResponse>> PrepareAsyncPutCoverage(::grpc::ClientContext* context, const ::helloworld::PutCoverageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::PutCoverageResponse>>(PrepareAsyncPutCoverageRaw(context, request, cq));
    }
    // 拉取全局覆盖率
    virtual ::grpc::Status GetCoverage(::grpc::ClientContext* context, const ::helloworld::GetCoverageRequest& request, ::helloworld::GetCoverageResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::GetCoverageResponse>> AsyncGetCoverage(::grpc::ClientContext* context, const ::helloworld::GetCoverageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::GetCoverageResponse>>(AsyncGetCoverageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::GetCoverageResponse>> PrepareAsyncGetCoverage(::grpc::ClientContext* context, const ::helloworld::GetCoverageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::GetCoverageResponse>>(PrepareAsyncGetCoverageRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Sends a greeting
      virtual void SayHello(::grpc::ClientContext* context, const ::helloworld::HelloRequest* request, ::helloworld::HelloReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SayHello(::grpc::ClientContext* context, const ::helloworld::HelloRequest* request, ::helloworld::HelloReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SayHelloAgain(::grpc::ClientContext* context, const ::helloworld::HelloRequest* request, ::helloworld::HelloReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SayHelloAgain(::grpc::ClientContext* context, const ::helloworld::HelloRequest* request, ::helloworld::HelloReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SayHelloStreamReply(::grpc::ClientContext* context, const ::helloworld::HelloRequest* request, ::grpc::ClientReadReactor< ::helloworld::HelloReply>* reactor) = 0;
      // 注册请求
      virtual void Register(::grpc::ClientContext* context, const ::helloworld::RegisterRequest* request, ::helloworld::RegisterResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Register(::grpc::ClientContext* context, const ::helloworld::RegisterRequest* request, ::helloworld::RegisterResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // 注销请求
      virtual void Unregister(::grpc::ClientContext* context, const ::helloworld::UnregisterRequest* request, ::helloworld::UnregisterResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Unregister(::grpc::ClientContext* context, const ::helloworld::UnregisterRequest* request, ::helloworld::UnregisterResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // 状态报告请求
      virtual void Heartbeat(::grpc::ClientContext* context, const ::helloworld::HeartbeatRequest* request, ::helloworld::HeartbeatResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Heartbeat(::grpc::ClientContext* context, const ::helloworld::HeartbeatRequest* request, ::helloworld::HeartbeatResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // 向服务端发出拉取种子请求，服务端根据调度算法返回一个或多个种子数据
      virtual void GetSeeds(::grpc::ClientContext* context, const ::helloworld::GetSeedsRequest* request, ::helloworld::GetSeedsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetSeeds(::grpc::ClientContext* context, const ::helloworld::GetSeedsRequest* request, ::helloworld::GetSeedsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // 向服务端提交一个种子数据
      virtual void PutSeed(::grpc::ClientContext* context, const ::helloworld::PutSeedRequest* request, ::helloworld::PutSeedResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PutSeed(::grpc::ClientContext* context, const ::helloworld::PutSeedRequest* request, ::helloworld::PutSeedResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // 推送局部覆盖率
      virtual void PutCoverage(::grpc::ClientContext* context, const ::helloworld::PutCoverageRequest* request, ::helloworld::PutCoverageResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PutCoverage(::grpc::ClientContext* context, const ::helloworld::PutCoverageRequest* request, ::helloworld::PutCoverageResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // 拉取全局覆盖率
      virtual void GetCoverage(::grpc::ClientContext* context, const ::helloworld::GetCoverageRequest* request, ::helloworld::GetCoverageResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetCoverage(::grpc::ClientContext* context, const ::helloworld::GetCoverageRequest* request, ::helloworld::GetCoverageResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::HelloReply>* AsyncSayHelloRaw(::grpc::ClientContext* context, const ::helloworld::HelloRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::HelloReply>* PrepareAsyncSayHelloRaw(::grpc::ClientContext* context, const ::helloworld::HelloRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::HelloReply>* AsyncSayHelloAgainRaw(::grpc::ClientContext* context, const ::helloworld::HelloRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::HelloReply>* PrepareAsyncSayHelloAgainRaw(::grpc::ClientContext* context, const ::helloworld::HelloRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::helloworld::HelloReply>* SayHelloStreamReplyRaw(::grpc::ClientContext* context, const ::helloworld::HelloRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::helloworld::HelloReply>* AsyncSayHelloStreamReplyRaw(::grpc::ClientContext* context, const ::helloworld::HelloRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::helloworld::HelloReply>* PrepareAsyncSayHelloStreamReplyRaw(::grpc::ClientContext* context, const ::helloworld::HelloRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::RegisterResponse>* AsyncRegisterRaw(::grpc::ClientContext* context, const ::helloworld::RegisterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::RegisterResponse>* PrepareAsyncRegisterRaw(::grpc::ClientContext* context, const ::helloworld::RegisterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::UnregisterResponse>* AsyncUnregisterRaw(::grpc::ClientContext* context, const ::helloworld::UnregisterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::UnregisterResponse>* PrepareAsyncUnregisterRaw(::grpc::ClientContext* context, const ::helloworld::UnregisterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::HeartbeatResponse>* AsyncHeartbeatRaw(::grpc::ClientContext* context, const ::helloworld::HeartbeatRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::HeartbeatResponse>* PrepareAsyncHeartbeatRaw(::grpc::ClientContext* context, const ::helloworld::HeartbeatRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::GetSeedsResponse>* AsyncGetSeedsRaw(::grpc::ClientContext* context, const ::helloworld::GetSeedsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::GetSeedsResponse>* PrepareAsyncGetSeedsRaw(::grpc::ClientContext* context, const ::helloworld::GetSeedsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::PutSeedResponse>* AsyncPutSeedRaw(::grpc::ClientContext* context, const ::helloworld::PutSeedRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::PutSeedResponse>* PrepareAsyncPutSeedRaw(::grpc::ClientContext* context, const ::helloworld::PutSeedRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::PutCoverageResponse>* AsyncPutCoverageRaw(::grpc::ClientContext* context, const ::helloworld::PutCoverageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::PutCoverageResponse>* PrepareAsyncPutCoverageRaw(::grpc::ClientContext* context, const ::helloworld::PutCoverageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::GetCoverageResponse>* AsyncGetCoverageRaw(::grpc::ClientContext* context, const ::helloworld::GetCoverageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::GetCoverageResponse>* PrepareAsyncGetCoverageRaw(::grpc::ClientContext* context, const ::helloworld::GetCoverageRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status SayHello(::grpc::ClientContext* context, const ::helloworld::HelloRequest& request, ::helloworld::HelloReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::helloworld::HelloReply>> AsyncSayHello(::grpc::ClientContext* context, const ::helloworld::HelloRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::helloworld::HelloReply>>(AsyncSayHelloRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::helloworld::HelloReply>> PrepareAsyncSayHello(::grpc::ClientContext* context, const ::helloworld::HelloRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::helloworld::HelloReply>>(PrepareAsyncSayHelloRaw(context, request, cq));
    }
    ::grpc::Status SayHelloAgain(::grpc::ClientContext* context, const ::helloworld::HelloRequest& request, ::helloworld::HelloReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::helloworld::HelloReply>> AsyncSayHelloAgain(::grpc::ClientContext* context, const ::helloworld::HelloRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::helloworld::HelloReply>>(AsyncSayHelloAgainRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::helloworld::HelloReply>> PrepareAsyncSayHelloAgain(::grpc::ClientContext* context, const ::helloworld::HelloRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::helloworld::HelloReply>>(PrepareAsyncSayHelloAgainRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::helloworld::HelloReply>> SayHelloStreamReply(::grpc::ClientContext* context, const ::helloworld::HelloRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::helloworld::HelloReply>>(SayHelloStreamReplyRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::helloworld::HelloReply>> AsyncSayHelloStreamReply(::grpc::ClientContext* context, const ::helloworld::HelloRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::helloworld::HelloReply>>(AsyncSayHelloStreamReplyRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::helloworld::HelloReply>> PrepareAsyncSayHelloStreamReply(::grpc::ClientContext* context, const ::helloworld::HelloRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::helloworld::HelloReply>>(PrepareAsyncSayHelloStreamReplyRaw(context, request, cq));
    }
    ::grpc::Status Register(::grpc::ClientContext* context, const ::helloworld::RegisterRequest& request, ::helloworld::RegisterResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::helloworld::RegisterResponse>> AsyncRegister(::grpc::ClientContext* context, const ::helloworld::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::helloworld::RegisterResponse>>(AsyncRegisterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::helloworld::RegisterResponse>> PrepareAsyncRegister(::grpc::ClientContext* context, const ::helloworld::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::helloworld::RegisterResponse>>(PrepareAsyncRegisterRaw(context, request, cq));
    }
    ::grpc::Status Unregister(::grpc::ClientContext* context, const ::helloworld::UnregisterRequest& request, ::helloworld::UnregisterResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::helloworld::UnregisterResponse>> AsyncUnregister(::grpc::ClientContext* context, const ::helloworld::UnregisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::helloworld::UnregisterResponse>>(AsyncUnregisterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::helloworld::UnregisterResponse>> PrepareAsyncUnregister(::grpc::ClientContext* context, const ::helloworld::UnregisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::helloworld::UnregisterResponse>>(PrepareAsyncUnregisterRaw(context, request, cq));
    }
    ::grpc::Status Heartbeat(::grpc::ClientContext* context, const ::helloworld::HeartbeatRequest& request, ::helloworld::HeartbeatResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::helloworld::HeartbeatResponse>> AsyncHeartbeat(::grpc::ClientContext* context, const ::helloworld::HeartbeatRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::helloworld::HeartbeatResponse>>(AsyncHeartbeatRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::helloworld::HeartbeatResponse>> PrepareAsyncHeartbeat(::grpc::ClientContext* context, const ::helloworld::HeartbeatRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::helloworld::HeartbeatResponse>>(PrepareAsyncHeartbeatRaw(context, request, cq));
    }
    ::grpc::Status GetSeeds(::grpc::ClientContext* context, const ::helloworld::GetSeedsRequest& request, ::helloworld::GetSeedsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::helloworld::GetSeedsResponse>> AsyncGetSeeds(::grpc::ClientContext* context, const ::helloworld::GetSeedsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::helloworld::GetSeedsResponse>>(AsyncGetSeedsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::helloworld::GetSeedsResponse>> PrepareAsyncGetSeeds(::grpc::ClientContext* context, const ::helloworld::GetSeedsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::helloworld::GetSeedsResponse>>(PrepareAsyncGetSeedsRaw(context, request, cq));
    }
    ::grpc::Status PutSeed(::grpc::ClientContext* context, const ::helloworld::PutSeedRequest& request, ::helloworld::PutSeedResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::helloworld::PutSeedResponse>> AsyncPutSeed(::grpc::ClientContext* context, const ::helloworld::PutSeedRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::helloworld::PutSeedResponse>>(AsyncPutSeedRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::helloworld::PutSeedResponse>> PrepareAsyncPutSeed(::grpc::ClientContext* context, const ::helloworld::PutSeedRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::helloworld::PutSeedResponse>>(PrepareAsyncPutSeedRaw(context, request, cq));
    }
    ::grpc::Status PutCoverage(::grpc::ClientContext* context, const ::helloworld::PutCoverageRequest& request, ::helloworld::PutCoverageResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::helloworld::PutCoverageResponse>> AsyncPutCoverage(::grpc::ClientContext* context, const ::helloworld::PutCoverageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::helloworld::PutCoverageResponse>>(AsyncPutCoverageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::helloworld::PutCoverageResponse>> PrepareAsyncPutCoverage(::grpc::ClientContext* context, const ::helloworld::PutCoverageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::helloworld::PutCoverageResponse>>(PrepareAsyncPutCoverageRaw(context, request, cq));
    }
    ::grpc::Status GetCoverage(::grpc::ClientContext* context, const ::helloworld::GetCoverageRequest& request, ::helloworld::GetCoverageResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::helloworld::GetCoverageResponse>> AsyncGetCoverage(::grpc::ClientContext* context, const ::helloworld::GetCoverageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::helloworld::GetCoverageResponse>>(AsyncGetCoverageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::helloworld::GetCoverageResponse>> PrepareAsyncGetCoverage(::grpc::ClientContext* context, const ::helloworld::GetCoverageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::helloworld::GetCoverageResponse>>(PrepareAsyncGetCoverageRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void SayHello(::grpc::ClientContext* context, const ::helloworld::HelloRequest* request, ::helloworld::HelloReply* response, std::function<void(::grpc::Status)>) override;
      void SayHello(::grpc::ClientContext* context, const ::helloworld::HelloRequest* request, ::helloworld::HelloReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SayHelloAgain(::grpc::ClientContext* context, const ::helloworld::HelloRequest* request, ::helloworld::HelloReply* response, std::function<void(::grpc::Status)>) override;
      void SayHelloAgain(::grpc::ClientContext* context, const ::helloworld::HelloRequest* request, ::helloworld::HelloReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SayHelloStreamReply(::grpc::ClientContext* context, const ::helloworld::HelloRequest* request, ::grpc::ClientReadReactor< ::helloworld::HelloReply>* reactor) override;
      void Register(::grpc::ClientContext* context, const ::helloworld::RegisterRequest* request, ::helloworld::RegisterResponse* response, std::function<void(::grpc::Status)>) override;
      void Register(::grpc::ClientContext* context, const ::helloworld::RegisterRequest* request, ::helloworld::RegisterResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Unregister(::grpc::ClientContext* context, const ::helloworld::UnregisterRequest* request, ::helloworld::UnregisterResponse* response, std::function<void(::grpc::Status)>) override;
      void Unregister(::grpc::ClientContext* context, const ::helloworld::UnregisterRequest* request, ::helloworld::UnregisterResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Heartbeat(::grpc::ClientContext* context, const ::helloworld::HeartbeatRequest* request, ::helloworld::HeartbeatResponse* response, std::function<void(::grpc::Status)>) override;
      void Heartbeat(::grpc::ClientContext* context, const ::helloworld::HeartbeatRequest* request, ::helloworld::HeartbeatResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetSeeds(::grpc::ClientContext* context, const ::helloworld::GetSeedsRequest* request, ::helloworld::GetSeedsResponse* response, std::function<void(::grpc::Status)>) override;
      void GetSeeds(::grpc::ClientContext* context, const ::helloworld::GetSeedsRequest* request, ::helloworld::GetSeedsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PutSeed(::grpc::ClientContext* context, const ::helloworld::PutSeedRequest* request, ::helloworld::PutSeedResponse* response, std::function<void(::grpc::Status)>) override;
      void PutSeed(::grpc::ClientContext* context, const ::helloworld::PutSeedRequest* request, ::helloworld::PutSeedResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PutCoverage(::grpc::ClientContext* context, const ::helloworld::PutCoverageRequest* request, ::helloworld::PutCoverageResponse* response, std::function<void(::grpc::Status)>) override;
      void PutCoverage(::grpc::ClientContext* context, const ::helloworld::PutCoverageRequest* request, ::helloworld::PutCoverageResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetCoverage(::grpc::ClientContext* context, const ::helloworld::GetCoverageRequest* request, ::helloworld::GetCoverageResponse* response, std::function<void(::grpc::Status)>) override;
      void GetCoverage(::grpc::ClientContext* context, const ::helloworld::GetCoverageRequest* request, ::helloworld::GetCoverageResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::helloworld::HelloReply>* AsyncSayHelloRaw(::grpc::ClientContext* context, const ::helloworld::HelloRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::helloworld::HelloReply>* PrepareAsyncSayHelloRaw(::grpc::ClientContext* context, const ::helloworld::HelloRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::helloworld::HelloReply>* AsyncSayHelloAgainRaw(::grpc::ClientContext* context, const ::helloworld::HelloRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::helloworld::HelloReply>* PrepareAsyncSayHelloAgainRaw(::grpc::ClientContext* context, const ::helloworld::HelloRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::helloworld::HelloReply>* SayHelloStreamReplyRaw(::grpc::ClientContext* context, const ::helloworld::HelloRequest& request) override;
    ::grpc::ClientAsyncReader< ::helloworld::HelloReply>* AsyncSayHelloStreamReplyRaw(::grpc::ClientContext* context, const ::helloworld::HelloRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::helloworld::HelloReply>* PrepareAsyncSayHelloStreamReplyRaw(::grpc::ClientContext* context, const ::helloworld::HelloRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::helloworld::RegisterResponse>* AsyncRegisterRaw(::grpc::ClientContext* context, const ::helloworld::RegisterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::helloworld::RegisterResponse>* PrepareAsyncRegisterRaw(::grpc::ClientContext* context, const ::helloworld::RegisterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::helloworld::UnregisterResponse>* AsyncUnregisterRaw(::grpc::ClientContext* context, const ::helloworld::UnregisterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::helloworld::UnregisterResponse>* PrepareAsyncUnregisterRaw(::grpc::ClientContext* context, const ::helloworld::UnregisterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::helloworld::HeartbeatResponse>* AsyncHeartbeatRaw(::grpc::ClientContext* context, const ::helloworld::HeartbeatRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::helloworld::HeartbeatResponse>* PrepareAsyncHeartbeatRaw(::grpc::ClientContext* context, const ::helloworld::HeartbeatRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::helloworld::GetSeedsResponse>* AsyncGetSeedsRaw(::grpc::ClientContext* context, const ::helloworld::GetSeedsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::helloworld::GetSeedsResponse>* PrepareAsyncGetSeedsRaw(::grpc::ClientContext* context, const ::helloworld::GetSeedsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::helloworld::PutSeedResponse>* AsyncPutSeedRaw(::grpc::ClientContext* context, const ::helloworld::PutSeedRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::helloworld::PutSeedResponse>* PrepareAsyncPutSeedRaw(::grpc::ClientContext* context, const ::helloworld::PutSeedRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::helloworld::PutCoverageResponse>* AsyncPutCoverageRaw(::grpc::ClientContext* context, const ::helloworld::PutCoverageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::helloworld::PutCoverageResponse>* PrepareAsyncPutCoverageRaw(::grpc::ClientContext* context, const ::helloworld::PutCoverageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::helloworld::GetCoverageResponse>* AsyncGetCoverageRaw(::grpc::ClientContext* context, const ::helloworld::GetCoverageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::helloworld::GetCoverageResponse>* PrepareAsyncGetCoverageRaw(::grpc::ClientContext* context, const ::helloworld::GetCoverageRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SayHello_;
    const ::grpc::internal::RpcMethod rpcmethod_SayHelloAgain_;
    const ::grpc::internal::RpcMethod rpcmethod_SayHelloStreamReply_;
    const ::grpc::internal::RpcMethod rpcmethod_Register_;
    const ::grpc::internal::RpcMethod rpcmethod_Unregister_;
    const ::grpc::internal::RpcMethod rpcmethod_Heartbeat_;
    const ::grpc::internal::RpcMethod rpcmethod_GetSeeds_;
    const ::grpc::internal::RpcMethod rpcmethod_PutSeed_;
    const ::grpc::internal::RpcMethod rpcmethod_PutCoverage_;
    const ::grpc::internal::RpcMethod rpcmethod_GetCoverage_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Sends a greeting
    virtual ::grpc::Status SayHello(::grpc::ServerContext* context, const ::helloworld::HelloRequest* request, ::helloworld::HelloReply* response);
    virtual ::grpc::Status SayHelloAgain(::grpc::ServerContext* context, const ::helloworld::HelloRequest* request, ::helloworld::HelloReply* response);
    virtual ::grpc::Status SayHelloStreamReply(::grpc::ServerContext* context, const ::helloworld::HelloRequest* request, ::grpc::ServerWriter< ::helloworld::HelloReply>* writer);
    // 注册请求
    virtual ::grpc::Status Register(::grpc::ServerContext* context, const ::helloworld::RegisterRequest* request, ::helloworld::RegisterResponse* response);
    // 注销请求
    virtual ::grpc::Status Unregister(::grpc::ServerContext* context, const ::helloworld::UnregisterRequest* request, ::helloworld::UnregisterResponse* response);
    // 状态报告请求
    virtual ::grpc::Status Heartbeat(::grpc::ServerContext* context, const ::helloworld::HeartbeatRequest* request, ::helloworld::HeartbeatResponse* response);
    // 向服务端发出拉取种子请求，服务端根据调度算法返回一个或多个种子数据
    virtual ::grpc::Status GetSeeds(::grpc::ServerContext* context, const ::helloworld::GetSeedsRequest* request, ::helloworld::GetSeedsResponse* response);
    // 向服务端提交一个种子数据
    virtual ::grpc::Status PutSeed(::grpc::ServerContext* context, const ::helloworld::PutSeedRequest* request, ::helloworld::PutSeedResponse* response);
    // 推送局部覆盖率
    virtual ::grpc::Status PutCoverage(::grpc::ServerContext* context, const ::helloworld::PutCoverageRequest* request, ::helloworld::PutCoverageResponse* response);
    // 拉取全局覆盖率
    virtual ::grpc::Status GetCoverage(::grpc::ServerContext* context, const ::helloworld::GetCoverageRequest* request, ::helloworld::GetCoverageResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_SayHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SayHello() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SayHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayHello(::grpc::ServerContext* /*context*/, const ::helloworld::HelloRequest* /*request*/, ::helloworld::HelloReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSayHello(::grpc::ServerContext* context, ::helloworld::HelloRequest* request, ::grpc::ServerAsyncResponseWriter< ::helloworld::HelloReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SayHelloAgain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SayHelloAgain() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SayHelloAgain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayHelloAgain(::grpc::ServerContext* /*context*/, const ::helloworld::HelloRequest* /*request*/, ::helloworld::HelloReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSayHelloAgain(::grpc::ServerContext* context, ::helloworld::HelloRequest* request, ::grpc::ServerAsyncResponseWriter< ::helloworld::HelloReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SayHelloStreamReply : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SayHelloStreamReply() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_SayHelloStreamReply() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayHelloStreamReply(::grpc::ServerContext* /*context*/, const ::helloworld::HelloRequest* /*request*/, ::grpc::ServerWriter< ::helloworld::HelloReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSayHelloStreamReply(::grpc::ServerContext* context, ::helloworld::HelloRequest* request, ::grpc::ServerAsyncWriter< ::helloworld::HelloReply>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Register() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_Register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Register(::grpc::ServerContext* /*context*/, const ::helloworld::RegisterRequest* /*request*/, ::helloworld::RegisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegister(::grpc::ServerContext* context, ::helloworld::RegisterRequest* request, ::grpc::ServerAsyncResponseWriter< ::helloworld::RegisterResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Unregister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Unregister() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_Unregister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Unregister(::grpc::ServerContext* /*context*/, const ::helloworld::UnregisterRequest* /*request*/, ::helloworld::UnregisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUnregister(::grpc::ServerContext* context, ::helloworld::UnregisterRequest* request, ::grpc::ServerAsyncResponseWriter< ::helloworld::UnregisterResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Heartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Heartbeat() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_Heartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Heartbeat(::grpc::ServerContext* /*context*/, const ::helloworld::HeartbeatRequest* /*request*/, ::helloworld::HeartbeatResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHeartbeat(::grpc::ServerContext* context, ::helloworld::HeartbeatRequest* request, ::grpc::ServerAsyncResponseWriter< ::helloworld::HeartbeatResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetSeeds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetSeeds() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_GetSeeds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSeeds(::grpc::ServerContext* /*context*/, const ::helloworld::GetSeedsRequest* /*request*/, ::helloworld::GetSeedsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSeeds(::grpc::ServerContext* context, ::helloworld::GetSeedsRequest* request, ::grpc::ServerAsyncResponseWriter< ::helloworld::GetSeedsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PutSeed : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PutSeed() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_PutSeed() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutSeed(::grpc::ServerContext* /*context*/, const ::helloworld::PutSeedRequest* /*request*/, ::helloworld::PutSeedResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPutSeed(::grpc::ServerContext* context, ::helloworld::PutSeedRequest* request, ::grpc::ServerAsyncResponseWriter< ::helloworld::PutSeedResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PutCoverage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PutCoverage() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_PutCoverage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutCoverage(::grpc::ServerContext* /*context*/, const ::helloworld::PutCoverageRequest* /*request*/, ::helloworld::PutCoverageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPutCoverage(::grpc::ServerContext* context, ::helloworld::PutCoverageRequest* request, ::grpc::ServerAsyncResponseWriter< ::helloworld::PutCoverageResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetCoverage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetCoverage() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_GetCoverage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCoverage(::grpc::ServerContext* /*context*/, const ::helloworld::GetCoverageRequest* /*request*/, ::helloworld::GetCoverageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCoverage(::grpc::ServerContext* context, ::helloworld::GetCoverageRequest* request, ::grpc::ServerAsyncResponseWriter< ::helloworld::GetCoverageResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SayHello<WithAsyncMethod_SayHelloAgain<WithAsyncMethod_SayHelloStreamReply<WithAsyncMethod_Register<WithAsyncMethod_Unregister<WithAsyncMethod_Heartbeat<WithAsyncMethod_GetSeeds<WithAsyncMethod_PutSeed<WithAsyncMethod_PutCoverage<WithAsyncMethod_GetCoverage<Service > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_SayHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SayHello() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::helloworld::HelloRequest, ::helloworld::HelloReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::helloworld::HelloRequest* request, ::helloworld::HelloReply* response) { return this->SayHello(context, request, response); }));}
    void SetMessageAllocatorFor_SayHello(
        ::grpc::MessageAllocator< ::helloworld::HelloRequest, ::helloworld::HelloReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::helloworld::HelloRequest, ::helloworld::HelloReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SayHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayHello(::grpc::ServerContext* /*context*/, const ::helloworld::HelloRequest* /*request*/, ::helloworld::HelloReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SayHello(
      ::grpc::CallbackServerContext* /*context*/, const ::helloworld::HelloRequest* /*request*/, ::helloworld::HelloReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SayHelloAgain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SayHelloAgain() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::helloworld::HelloRequest, ::helloworld::HelloReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::helloworld::HelloRequest* request, ::helloworld::HelloReply* response) { return this->SayHelloAgain(context, request, response); }));}
    void SetMessageAllocatorFor_SayHelloAgain(
        ::grpc::MessageAllocator< ::helloworld::HelloRequest, ::helloworld::HelloReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::helloworld::HelloRequest, ::helloworld::HelloReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SayHelloAgain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayHelloAgain(::grpc::ServerContext* /*context*/, const ::helloworld::HelloRequest* /*request*/, ::helloworld::HelloReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SayHelloAgain(
      ::grpc::CallbackServerContext* /*context*/, const ::helloworld::HelloRequest* /*request*/, ::helloworld::HelloReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SayHelloStreamReply : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SayHelloStreamReply() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackServerStreamingHandler< ::helloworld::HelloRequest, ::helloworld::HelloReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::helloworld::HelloRequest* request) { return this->SayHelloStreamReply(context, request); }));
    }
    ~WithCallbackMethod_SayHelloStreamReply() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayHelloStreamReply(::grpc::ServerContext* /*context*/, const ::helloworld::HelloRequest* /*request*/, ::grpc::ServerWriter< ::helloworld::HelloReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::helloworld::HelloReply>* SayHelloStreamReply(
      ::grpc::CallbackServerContext* /*context*/, const ::helloworld::HelloRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Register() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::helloworld::RegisterRequest, ::helloworld::RegisterResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::helloworld::RegisterRequest* request, ::helloworld::RegisterResponse* response) { return this->Register(context, request, response); }));}
    void SetMessageAllocatorFor_Register(
        ::grpc::MessageAllocator< ::helloworld::RegisterRequest, ::helloworld::RegisterResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::helloworld::RegisterRequest, ::helloworld::RegisterResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Register(::grpc::ServerContext* /*context*/, const ::helloworld::RegisterRequest* /*request*/, ::helloworld::RegisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Register(
      ::grpc::CallbackServerContext* /*context*/, const ::helloworld::RegisterRequest* /*request*/, ::helloworld::RegisterResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Unregister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Unregister() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::helloworld::UnregisterRequest, ::helloworld::UnregisterResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::helloworld::UnregisterRequest* request, ::helloworld::UnregisterResponse* response) { return this->Unregister(context, request, response); }));}
    void SetMessageAllocatorFor_Unregister(
        ::grpc::MessageAllocator< ::helloworld::UnregisterRequest, ::helloworld::UnregisterResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::helloworld::UnregisterRequest, ::helloworld::UnregisterResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Unregister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Unregister(::grpc::ServerContext* /*context*/, const ::helloworld::UnregisterRequest* /*request*/, ::helloworld::UnregisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Unregister(
      ::grpc::CallbackServerContext* /*context*/, const ::helloworld::UnregisterRequest* /*request*/, ::helloworld::UnregisterResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Heartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Heartbeat() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::helloworld::HeartbeatRequest, ::helloworld::HeartbeatResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::helloworld::HeartbeatRequest* request, ::helloworld::HeartbeatResponse* response) { return this->Heartbeat(context, request, response); }));}
    void SetMessageAllocatorFor_Heartbeat(
        ::grpc::MessageAllocator< ::helloworld::HeartbeatRequest, ::helloworld::HeartbeatResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::helloworld::HeartbeatRequest, ::helloworld::HeartbeatResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Heartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Heartbeat(::grpc::ServerContext* /*context*/, const ::helloworld::HeartbeatRequest* /*request*/, ::helloworld::HeartbeatResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Heartbeat(
      ::grpc::CallbackServerContext* /*context*/, const ::helloworld::HeartbeatRequest* /*request*/, ::helloworld::HeartbeatResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetSeeds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetSeeds() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::helloworld::GetSeedsRequest, ::helloworld::GetSeedsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::helloworld::GetSeedsRequest* request, ::helloworld::GetSeedsResponse* response) { return this->GetSeeds(context, request, response); }));}
    void SetMessageAllocatorFor_GetSeeds(
        ::grpc::MessageAllocator< ::helloworld::GetSeedsRequest, ::helloworld::GetSeedsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::helloworld::GetSeedsRequest, ::helloworld::GetSeedsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetSeeds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSeeds(::grpc::ServerContext* /*context*/, const ::helloworld::GetSeedsRequest* /*request*/, ::helloworld::GetSeedsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetSeeds(
      ::grpc::CallbackServerContext* /*context*/, const ::helloworld::GetSeedsRequest* /*request*/, ::helloworld::GetSeedsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PutSeed : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PutSeed() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::helloworld::PutSeedRequest, ::helloworld::PutSeedResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::helloworld::PutSeedRequest* request, ::helloworld::PutSeedResponse* response) { return this->PutSeed(context, request, response); }));}
    void SetMessageAllocatorFor_PutSeed(
        ::grpc::MessageAllocator< ::helloworld::PutSeedRequest, ::helloworld::PutSeedResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::helloworld::PutSeedRequest, ::helloworld::PutSeedResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PutSeed() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutSeed(::grpc::ServerContext* /*context*/, const ::helloworld::PutSeedRequest* /*request*/, ::helloworld::PutSeedResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PutSeed(
      ::grpc::CallbackServerContext* /*context*/, const ::helloworld::PutSeedRequest* /*request*/, ::helloworld::PutSeedResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PutCoverage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PutCoverage() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::helloworld::PutCoverageRequest, ::helloworld::PutCoverageResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::helloworld::PutCoverageRequest* request, ::helloworld::PutCoverageResponse* response) { return this->PutCoverage(context, request, response); }));}
    void SetMessageAllocatorFor_PutCoverage(
        ::grpc::MessageAllocator< ::helloworld::PutCoverageRequest, ::helloworld::PutCoverageResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::helloworld::PutCoverageRequest, ::helloworld::PutCoverageResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PutCoverage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutCoverage(::grpc::ServerContext* /*context*/, const ::helloworld::PutCoverageRequest* /*request*/, ::helloworld::PutCoverageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PutCoverage(
      ::grpc::CallbackServerContext* /*context*/, const ::helloworld::PutCoverageRequest* /*request*/, ::helloworld::PutCoverageResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetCoverage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetCoverage() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::helloworld::GetCoverageRequest, ::helloworld::GetCoverageResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::helloworld::GetCoverageRequest* request, ::helloworld::GetCoverageResponse* response) { return this->GetCoverage(context, request, response); }));}
    void SetMessageAllocatorFor_GetCoverage(
        ::grpc::MessageAllocator< ::helloworld::GetCoverageRequest, ::helloworld::GetCoverageResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::helloworld::GetCoverageRequest, ::helloworld::GetCoverageResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetCoverage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCoverage(::grpc::ServerContext* /*context*/, const ::helloworld::GetCoverageRequest* /*request*/, ::helloworld::GetCoverageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetCoverage(
      ::grpc::CallbackServerContext* /*context*/, const ::helloworld::GetCoverageRequest* /*request*/, ::helloworld::GetCoverageResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_SayHello<WithCallbackMethod_SayHelloAgain<WithCallbackMethod_SayHelloStreamReply<WithCallbackMethod_Register<WithCallbackMethod_Unregister<WithCallbackMethod_Heartbeat<WithCallbackMethod_GetSeeds<WithCallbackMethod_PutSeed<WithCallbackMethod_PutCoverage<WithCallbackMethod_GetCoverage<Service > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_SayHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SayHello() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SayHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayHello(::grpc::ServerContext* /*context*/, const ::helloworld::HelloRequest* /*request*/, ::helloworld::HelloReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SayHelloAgain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SayHelloAgain() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SayHelloAgain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayHelloAgain(::grpc::ServerContext* /*context*/, const ::helloworld::HelloRequest* /*request*/, ::helloworld::HelloReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SayHelloStreamReply : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SayHelloStreamReply() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_SayHelloStreamReply() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayHelloStreamReply(::grpc::ServerContext* /*context*/, const ::helloworld::HelloRequest* /*request*/, ::grpc::ServerWriter< ::helloworld::HelloReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Register() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_Register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Register(::grpc::ServerContext* /*context*/, const ::helloworld::RegisterRequest* /*request*/, ::helloworld::RegisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Unregister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Unregister() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_Unregister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Unregister(::grpc::ServerContext* /*context*/, const ::helloworld::UnregisterRequest* /*request*/, ::helloworld::UnregisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Heartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Heartbeat() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_Heartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Heartbeat(::grpc::ServerContext* /*context*/, const ::helloworld::HeartbeatRequest* /*request*/, ::helloworld::HeartbeatResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetSeeds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetSeeds() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_GetSeeds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSeeds(::grpc::ServerContext* /*context*/, const ::helloworld::GetSeedsRequest* /*request*/, ::helloworld::GetSeedsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PutSeed : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PutSeed() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_PutSeed() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutSeed(::grpc::ServerContext* /*context*/, const ::helloworld::PutSeedRequest* /*request*/, ::helloworld::PutSeedResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PutCoverage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PutCoverage() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_PutCoverage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutCoverage(::grpc::ServerContext* /*context*/, const ::helloworld::PutCoverageRequest* /*request*/, ::helloworld::PutCoverageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetCoverage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetCoverage() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_GetCoverage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCoverage(::grpc::ServerContext* /*context*/, const ::helloworld::GetCoverageRequest* /*request*/, ::helloworld::GetCoverageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SayHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SayHello() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SayHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayHello(::grpc::ServerContext* /*context*/, const ::helloworld::HelloRequest* /*request*/, ::helloworld::HelloReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSayHello(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SayHelloAgain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SayHelloAgain() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_SayHelloAgain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayHelloAgain(::grpc::ServerContext* /*context*/, const ::helloworld::HelloRequest* /*request*/, ::helloworld::HelloReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSayHelloAgain(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SayHelloStreamReply : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SayHelloStreamReply() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_SayHelloStreamReply() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayHelloStreamReply(::grpc::ServerContext* /*context*/, const ::helloworld::HelloRequest* /*request*/, ::grpc::ServerWriter< ::helloworld::HelloReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSayHelloStreamReply(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Register() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_Register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Register(::grpc::ServerContext* /*context*/, const ::helloworld::RegisterRequest* /*request*/, ::helloworld::RegisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegister(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Unregister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Unregister() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_Unregister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Unregister(::grpc::ServerContext* /*context*/, const ::helloworld::UnregisterRequest* /*request*/, ::helloworld::UnregisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUnregister(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Heartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Heartbeat() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_Heartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Heartbeat(::grpc::ServerContext* /*context*/, const ::helloworld::HeartbeatRequest* /*request*/, ::helloworld::HeartbeatResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHeartbeat(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetSeeds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetSeeds() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_GetSeeds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSeeds(::grpc::ServerContext* /*context*/, const ::helloworld::GetSeedsRequest* /*request*/, ::helloworld::GetSeedsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSeeds(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PutSeed : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PutSeed() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_PutSeed() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutSeed(::grpc::ServerContext* /*context*/, const ::helloworld::PutSeedRequest* /*request*/, ::helloworld::PutSeedResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPutSeed(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PutCoverage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PutCoverage() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_PutCoverage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutCoverage(::grpc::ServerContext* /*context*/, const ::helloworld::PutCoverageRequest* /*request*/, ::helloworld::PutCoverageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPutCoverage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetCoverage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetCoverage() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_GetCoverage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCoverage(::grpc::ServerContext* /*context*/, const ::helloworld::GetCoverageRequest* /*request*/, ::helloworld::GetCoverageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCoverage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SayHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SayHello() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SayHello(context, request, response); }));
    }
    ~WithRawCallbackMethod_SayHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayHello(::grpc::ServerContext* /*context*/, const ::helloworld::HelloRequest* /*request*/, ::helloworld::HelloReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SayHello(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SayHelloAgain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SayHelloAgain() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SayHelloAgain(context, request, response); }));
    }
    ~WithRawCallbackMethod_SayHelloAgain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayHelloAgain(::grpc::ServerContext* /*context*/, const ::helloworld::HelloRequest* /*request*/, ::helloworld::HelloReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SayHelloAgain(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SayHelloStreamReply : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SayHelloStreamReply() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->SayHelloStreamReply(context, request); }));
    }
    ~WithRawCallbackMethod_SayHelloStreamReply() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayHelloStreamReply(::grpc::ServerContext* /*context*/, const ::helloworld::HelloRequest* /*request*/, ::grpc::ServerWriter< ::helloworld::HelloReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* SayHelloStreamReply(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Register() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Register(context, request, response); }));
    }
    ~WithRawCallbackMethod_Register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Register(::grpc::ServerContext* /*context*/, const ::helloworld::RegisterRequest* /*request*/, ::helloworld::RegisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Register(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Unregister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Unregister() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Unregister(context, request, response); }));
    }
    ~WithRawCallbackMethod_Unregister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Unregister(::grpc::ServerContext* /*context*/, const ::helloworld::UnregisterRequest* /*request*/, ::helloworld::UnregisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Unregister(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Heartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Heartbeat() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Heartbeat(context, request, response); }));
    }
    ~WithRawCallbackMethod_Heartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Heartbeat(::grpc::ServerContext* /*context*/, const ::helloworld::HeartbeatRequest* /*request*/, ::helloworld::HeartbeatResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Heartbeat(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetSeeds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetSeeds() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetSeeds(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetSeeds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSeeds(::grpc::ServerContext* /*context*/, const ::helloworld::GetSeedsRequest* /*request*/, ::helloworld::GetSeedsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetSeeds(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PutSeed : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PutSeed() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PutSeed(context, request, response); }));
    }
    ~WithRawCallbackMethod_PutSeed() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutSeed(::grpc::ServerContext* /*context*/, const ::helloworld::PutSeedRequest* /*request*/, ::helloworld::PutSeedResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PutSeed(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PutCoverage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PutCoverage() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PutCoverage(context, request, response); }));
    }
    ~WithRawCallbackMethod_PutCoverage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutCoverage(::grpc::ServerContext* /*context*/, const ::helloworld::PutCoverageRequest* /*request*/, ::helloworld::PutCoverageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PutCoverage(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetCoverage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetCoverage() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetCoverage(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetCoverage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCoverage(::grpc::ServerContext* /*context*/, const ::helloworld::GetCoverageRequest* /*request*/, ::helloworld::GetCoverageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetCoverage(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SayHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SayHello() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::helloworld::HelloRequest, ::helloworld::HelloReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::helloworld::HelloRequest, ::helloworld::HelloReply>* streamer) {
                       return this->StreamedSayHello(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SayHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SayHello(::grpc::ServerContext* /*context*/, const ::helloworld::HelloRequest* /*request*/, ::helloworld::HelloReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSayHello(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::helloworld::HelloRequest,::helloworld::HelloReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SayHelloAgain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SayHelloAgain() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::helloworld::HelloRequest, ::helloworld::HelloReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::helloworld::HelloRequest, ::helloworld::HelloReply>* streamer) {
                       return this->StreamedSayHelloAgain(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SayHelloAgain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SayHelloAgain(::grpc::ServerContext* /*context*/, const ::helloworld::HelloRequest* /*request*/, ::helloworld::HelloReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSayHelloAgain(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::helloworld::HelloRequest,::helloworld::HelloReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Register() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::helloworld::RegisterRequest, ::helloworld::RegisterResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::helloworld::RegisterRequest, ::helloworld::RegisterResponse>* streamer) {
                       return this->StreamedRegister(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Register(::grpc::ServerContext* /*context*/, const ::helloworld::RegisterRequest* /*request*/, ::helloworld::RegisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRegister(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::helloworld::RegisterRequest,::helloworld::RegisterResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Unregister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Unregister() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::helloworld::UnregisterRequest, ::helloworld::UnregisterResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::helloworld::UnregisterRequest, ::helloworld::UnregisterResponse>* streamer) {
                       return this->StreamedUnregister(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Unregister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Unregister(::grpc::ServerContext* /*context*/, const ::helloworld::UnregisterRequest* /*request*/, ::helloworld::UnregisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUnregister(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::helloworld::UnregisterRequest,::helloworld::UnregisterResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Heartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Heartbeat() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::helloworld::HeartbeatRequest, ::helloworld::HeartbeatResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::helloworld::HeartbeatRequest, ::helloworld::HeartbeatResponse>* streamer) {
                       return this->StreamedHeartbeat(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Heartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Heartbeat(::grpc::ServerContext* /*context*/, const ::helloworld::HeartbeatRequest* /*request*/, ::helloworld::HeartbeatResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedHeartbeat(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::helloworld::HeartbeatRequest,::helloworld::HeartbeatResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetSeeds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetSeeds() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::helloworld::GetSeedsRequest, ::helloworld::GetSeedsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::helloworld::GetSeedsRequest, ::helloworld::GetSeedsResponse>* streamer) {
                       return this->StreamedGetSeeds(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetSeeds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetSeeds(::grpc::ServerContext* /*context*/, const ::helloworld::GetSeedsRequest* /*request*/, ::helloworld::GetSeedsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetSeeds(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::helloworld::GetSeedsRequest,::helloworld::GetSeedsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PutSeed : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PutSeed() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::helloworld::PutSeedRequest, ::helloworld::PutSeedResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::helloworld::PutSeedRequest, ::helloworld::PutSeedResponse>* streamer) {
                       return this->StreamedPutSeed(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PutSeed() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PutSeed(::grpc::ServerContext* /*context*/, const ::helloworld::PutSeedRequest* /*request*/, ::helloworld::PutSeedResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPutSeed(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::helloworld::PutSeedRequest,::helloworld::PutSeedResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PutCoverage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PutCoverage() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::helloworld::PutCoverageRequest, ::helloworld::PutCoverageResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::helloworld::PutCoverageRequest, ::helloworld::PutCoverageResponse>* streamer) {
                       return this->StreamedPutCoverage(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PutCoverage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PutCoverage(::grpc::ServerContext* /*context*/, const ::helloworld::PutCoverageRequest* /*request*/, ::helloworld::PutCoverageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPutCoverage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::helloworld::PutCoverageRequest,::helloworld::PutCoverageResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetCoverage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetCoverage() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::helloworld::GetCoverageRequest, ::helloworld::GetCoverageResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::helloworld::GetCoverageRequest, ::helloworld::GetCoverageResponse>* streamer) {
                       return this->StreamedGetCoverage(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetCoverage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetCoverage(::grpc::ServerContext* /*context*/, const ::helloworld::GetCoverageRequest* /*request*/, ::helloworld::GetCoverageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetCoverage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::helloworld::GetCoverageRequest,::helloworld::GetCoverageResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SayHello<WithStreamedUnaryMethod_SayHelloAgain<WithStreamedUnaryMethod_Register<WithStreamedUnaryMethod_Unregister<WithStreamedUnaryMethod_Heartbeat<WithStreamedUnaryMethod_GetSeeds<WithStreamedUnaryMethod_PutSeed<WithStreamedUnaryMethod_PutCoverage<WithStreamedUnaryMethod_GetCoverage<Service > > > > > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_SayHelloStreamReply : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_SayHelloStreamReply() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::helloworld::HelloRequest, ::helloworld::HelloReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::helloworld::HelloRequest, ::helloworld::HelloReply>* streamer) {
                       return this->StreamedSayHelloStreamReply(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_SayHelloStreamReply() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SayHelloStreamReply(::grpc::ServerContext* /*context*/, const ::helloworld::HelloRequest* /*request*/, ::grpc::ServerWriter< ::helloworld::HelloReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedSayHelloStreamReply(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::helloworld::HelloRequest,::helloworld::HelloReply>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_SayHelloStreamReply<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_SayHello<WithStreamedUnaryMethod_SayHelloAgain<WithSplitStreamingMethod_SayHelloStreamReply<WithStreamedUnaryMethod_Register<WithStreamedUnaryMethod_Unregister<WithStreamedUnaryMethod_Heartbeat<WithStreamedUnaryMethod_GetSeeds<WithStreamedUnaryMethod_PutSeed<WithStreamedUnaryMethod_PutCoverage<WithStreamedUnaryMethod_GetCoverage<Service > > > > > > > > > > StreamedService;
};

}  // namespace helloworld


#endif  // GRPC_helloworld_2eproto__INCLUDED
