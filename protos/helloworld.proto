// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

option java_multiple_files = true;
option java_package = "io.grpc.examples.helloworld";
option java_outer_classname = "HelloWorldProto";
option objc_class_prefix = "HLW";

package helloworld;

// The greeting service definition.
service Greeter {
  // Sends a greeting
  rpc SayHello (HelloRequest) returns (HelloReply) {}
  rpc SayHelloAgain (HelloRequest) returns (HelloReply) {}
  rpc SayHelloStreamReply (HelloRequest) returns (stream HelloReply) {}
    // 注册请求
  rpc Register (RegisterRequest) returns (RegisterResponse);
  // 注销请求
  rpc Unregister (UnregisterRequest) returns (UnregisterResponse);
  // 状态报告请求
  rpc Heartbeat (HeartbeatRequest) returns (HeartbeatResponse);
  // 向服务端发出拉取种子请求，服务端根据调度算法返回一个或多个种子数据
  rpc GetSeeds (GetSeedsRequest) returns (GetSeedsResponse);
  // 向服务端提交一个种子数据
  rpc PutSeed (PutSeedRequest) returns (PutSeedResponse);
  // 推送局部覆盖率
  rpc PutCoverage (PutCoverageRequest) returns (PutCoverageResponse);
  // 拉取全局覆盖率
  rpc GetCoverage (GetCoverageRequest) returns (GetCoverageResponse);
}

// The request message containing the user's name.
message HelloRequest {
  string name = 1;
}

// The response message containing the greetings
message HelloReply {
  string message = 1;
}


// 种子分类
enum SeedType {
  // 普通种子
  NORMAL = 0;
  // 触发新路径
  NEW = 1;
  // 触发崩溃的种子
  CRASH = 2;
  // 触发超时的种子
  HANG = 3;
}

// 模糊测试工具分类
enum FuzzerType{
  // 未指定类别
  FUZZER_UNKNOWN = 0;
  // AFL
  FUZZER_AFL = 1;
  // Angora
  FUZZER_ANGORA = 2;
  // QSYM
  FUZZER_QSYM = 3;
  // LIBFUZZER
  FUZZER_LIBFUZZER = 4;
  // HONGGFUZZ
  FUZZER_HONGGFUZZ = 5;
  // AFLFast
  FUZZER_AFLFAST = 6;
  // FairFuzz
  FUZZER_FAIRFUZZ = 7;
  // Radamsa
  FUZZER_RADAMSA = 8;
}

// 模糊器信息，一个模糊器即一个客户端
message Fuzzer{
  // 模糊器编号
  uint64 id = 1;

  // 模糊器类型
  FuzzerType fuzzer_type = 2;

  // 模糊器已执行数
  uint64 exec = 3;

  // 模糊器的局部覆盖率位图
  uint64 bitmap_size = 4;

  // 最近报告时间，心跳将更新该字段
  // 调用前需将时间戳转换为uint64数据
  // 此处的时间戳对应于C语言中的struct timespec数据结构。
  uint64 timestamp = 5;

  // 模糊器所属计算节点
  uint64 compute_node_id = 6;
}

// 计算节点
message ComputeNode{
  // 计算节点编号
  uint64 id = 1;
  // 计算节点IP地址
  string ipaddr = 2;
  // 计算节点CPU核心数
  uint32 cores = 3;
  // 计算节点可用内存数
  uint64 mem_size = 4;
}

// 种子数据
message Seed {
  // 种子编号
  uint64 id = 1;
  // 种子类型
  SeedType seed_type = 2;
  // 种子长度
  uint64 length = 3;
  // 发现该种子的模糊器
  uint64 fuzzer_id = 4;
  // 服务端存储路径
  string file_path = 5;
  // 种子数据
  bytes data = 6;
}

// 客户端发出的注册请求消息
message RegisterRequest {
  // 模糊器
  Fuzzer fuzzer = 1;
  // 所属计算节点
  ComputeNode compute_node = 2;
}

// 注册响应消息，成功则返回服务端分配的模糊器编号和服务器编号
message RegisterResponse {
  // 是否成功
  bool success = 1;
  // 分配的模糊器编号
  uint64 fuzzer_id = 2;
  // 分配的计算节点编号，如已分配则为原值
  uint64 compute_node_id = 3;
}

// 客户端发出的注销请求消息，服务端根据fuzzer_id检索客户端列表
message UnregisterRequest {
  // 模糊器编号
  uint64 fuzzer_id = 1;
}

// 注销响应消息 - 注销是否成功
message UnregisterResponse {
  // 是否成功
  bool success = 1;
}

// 状态报告消息
message HeartbeatRequest {
  // 模糊器编号
  uint64 fuzzer_id = 1;
  // 模糊器执行数
  uint64 exec = 2;
  // 最近报告时间
  // 调用前需将时间戳转换为uint64数据，即距Unix纪元的秒数。
  // 时间戳对应于C语言中的struct timespec数据结构。
  uint64 timestamp = 3;
}

// 状态报告响应
message HeartbeatResponse {
  // 是否成功
  bool success = 1;
}

// 获取种子消息 - 向服务端提供fuzzer_id
message GetSeedsRequest {
  // 模糊器编号
  uint64 fuzzer_id = 1;
}

// 获取种子请求响应消息，成功则得到1..N个种子数据
message GetSeedsResponse {
  // 是否成功
  bool success = 1;
  // 种子数组
  repeated Seed seeds = 2;
}

// 向服务端提交1个种子数据
message PutSeedRequest {
  // 模糊器编号
  uint64 fuzzer_id = 1;
  // 单个种子数据
  Seed seed = 2;
}

// 提交种子 - 响应
message PutSeedResponse {
  // 是否成功
  bool success = 1;
}

// 提交局部覆盖率 - 请求
message PutCoverageRequest {
  // 模糊器编号
  uint64 fuzzer_id = 1;
  // 覆盖率位图
  bytes coverage_data = 2;
}

// 提交局部覆盖率 - 响应 -
message PutCoverageResponse {
  //  是否成功
  bool success = 1;
}

// 获取全局覆盖率 - 请求 - 是否成功
message GetCoverageRequest {
  // 模糊器编号
  uint64 fuzzer_id = 1;
}

// 获取全局覆盖率 - 响应 - 是否成功
message GetCoverageResponse {
  // 是否成功
  bool success = 1;
  // 全员覆盖率位图
  bytes coverage_data = 2;
}